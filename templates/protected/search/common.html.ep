%# -*- mode: web; eval: (follow-mode) -*-
% use POSIX qw(strftime);
% use Time::Piece;
% my $now = localtime;
% my $i = 0;
% my $j = 0;
% my $attr_val_class = "";
% my $count = @$entries;
<div class="row w-100 <%= app->{cfg}->{ui}->{page}->{header}->{css} %>">
  <div class="col-xs-6 col-sm-6 col-md-4 col-lg-3">
    <h3 class="fw-bold">
      % if ( exists  $search_common_params->{dn_to_history} ) {
	<i class="text-info fa-solid <%= app->{cfg}->{ui}->{menu}->{history}->{ico} . ' ' .  app->{cfg}->{ui}->{menu}->{history}->{col} %> me-3"></i>
	History
      % }
      % else {
	<i class="fa-solid fa-search fa-lg text-info me-2"></i>
	Search Results: <span class="fs-6 align-middle"><%= $count %> rows</span>
      % }
    </h3>
  </div>
  <div class="col-xs-6 col-sm-6 col-md-8 col-lg-9">
    <dl class="row font-monospace text-secondary umi-text-xs">
      <dt class="col-1 text-end px-0">base:</dt>  <dd class="col-11 text-break"><%= $search_arg->{base}   %></dd>
      <dt class="col-1 text-end px-0">filter:</dt><dd class="col-11 text-break"><%= $search_arg->{filter} %></dd>
    </dl>
  </div>
</div>

<script>
 const params = {
   base: <%= b($search_arg->{base})->quote %>,
   filter: <%= b($search_arg->{filter})->quote %>,
   scope: "<%= exists $search_arg->{scope} ? $search_arg->{scope} : 'sub' =%>
"<%== exists $search_arg->{attrs} ? ",\n   attrs: \"" . join(',', @{$search_arg->{attrs}}) . '"': '' %>
 };

 async function fetchLdif(params = {}) {
   const queryParams = {
     base_dn: params.base,
     search_filter: params.filter,
     search_scope: params.scope
   };

   if (params.attrs) {
     queryParams.show_attr = params.attrs;
   }

   const query = new URLSearchParams(queryParams).toString();   const baseUrl = '<%= url_for("get_searchresult_ldif")->to_abs %>';
   const url = baseUrl + '?' + query;
    console.log(url);
   const res = await fetch(url);
   if (!res.ok) throw new Error("Network error");
   return await res.text();
 }

</script>

<div class="btn-group mb-2" role="group">
  <button id="toggleAllBtn"
	  accesskey="t"
	  class="btn btn-sm btn-secondary"
	  title="toggle state (collapsed/expanded) of each row: Alt-Shift-t"
  >
    <i id="toggleAllIcon" class="fa-solid fa-expand"></i>
  </button>
  <button id="invertAllBtn"
	  accesskey="i"
	  class="btn btn-sm btn-secondary me-2"
	  title="inverse state (collapsed/expanded) of each row: Alt-Shift-i"
  >
    <i id="invertAllIcon" class="fa-solid fa-right-left"></i>
  </button>

  %== h_btn_cp_from_url   id => 'copy-ldif', js_func => sub { return "fetchLdif(params)" }, title => 'Copy LDIF of this search to clipboard';
  %== h_btn_save_from_url id => 'save-ldif', js_func => sub { return "fetchLdif(params)" }, title => 'Save LDIF of this search to a text file';

</div>

%# vh-100 is important, without it dropwown are not shown for collapsed rows
<div id="searchresult" class="container-fluid vh-100 px-0">

  % my ($col, $cn, $ct, $mn, $mt);
  % my $mps = '';
  % my $acclog = app->{cfg}->{ldap}->{accesslog};
  % my $re = qr/^.*$acclog$/;
  % my $subst = app->{cfg}->{ui}->{page}->{subst};

  % for my $e ( @$entries ) {

    % if ( $e_info->{$e->dn}->{disabled} ) {
      % $col = 'danger';
    % } else {
      % $col = h_dn_color($e);
      % if ( $col eq 'warning' ) {  $mps = ' ms-3'; }
      % elsif ($col eq 'success') { $mps = ' ms-4 ps-1'; }
      % else { $mps = ''; }
    % }
    % $col .= '-subtle';

    % my @dn_ico = ($e->dn =~ /authorizedService=([^,]+)\@/g);

    %## extracting users root object dn
    % my $root_usr_dn = h_get_root_dn $e->dn;
    % $root_usr_dn = '' if ! defined $root_usr_dn;

    <div class="card border border-<%= $col %> my-1" id="card-<%= $i %>">

	<div class="card-header bg-<%= $col %> p-0 m-0 fs-6">
	<div class="btn-group z-10" role="group">
	  %# COLLAPSE CARET
	  <button class="btn border-0<%= ' collapsed' if scalar @$entries > 1 %>" type="button"
		  data-bs-toggle="collapse" data-bs-target="#collapse-<%= $i %>"
		  aria-expanded="<%= scalar @$entries > 1 ? 'false' : 'true' %>" aria-controls="collapse-<%= $i %>">
	    <i class="fa-solid fa-caret-right"></i>
	  </button>
	  %# BURGER MENU
	  %# if ( $e->dn !~ /$re/ ) {
	    % my $rrdn = '';
	    % $rrdn = $1 if $e->dn =~ /^uid=([^,]+),ou=People,dc=/i;
	    %= include 'protected/search/common-menu', e => $e, i => $i, rrdn => $rrdn
	  %# }

	  %# ICO after BURGER MENU
	  % my $re_accesslog = app->{cfg}->{ldap}->{accesslog};
	  %= form_for '/search/common' => (class => "injectable-form", method => 'POST') => begin
	    %= hidden_field 'ldap_subtree' => $root_usr_dn ne '' ? $root_usr_dn : $e->dn
	    <button type="submit" class="btn border-0"
		    % if ($root_usr_dn ne '') {
		    title="Click to get whole root object subtree"><i class="fa-solid fa-user-tag"></i>
		    % } elsif ($e->dn =~ /^.*,$re_accesslog$/)
		    % {
		      ><i class="fa-solid fa-history"></i>
		    % } else {
		      ><i class="fa-solid fa-shapes"></i>
		    % }
	    </button>
	  % end

	  %# REWRITTEN DN with ICO
	  %= form_for '/search/common' => (class => "injectable-form", method => 'POST') => begin
	  %= hidden_field 'ldap_subtree' => $e->dn
	    <button type="submit" class="btn px-0 fw-bold border-0" title="Click to get branch object subtree">
	      % if ( scalar @dn_ico ) {
		<%# == '<i class="' . app->{cfg}->{ui}->{ico}->{usvc}->{$dn_ico[0]} . $mps . ' me-2"></i>' %>
		<%== '<i class="' . app->{cfg}->{ldap}->{authorizedService}->{$dn_ico[0]}->{icon} . $mps . ' me-2"></i>' %>
	      % } elsif ( $e->exists('reqType') )
	      % {
		% my $reqType = $e->get_value('reqType');
		% if ( $reqType eq 'add' )
		% {
		  <i class="fa-solid fa-circle-plus fa-xs me-2 text-success"></i>
		% } elsif ( $reqType eq 'modify' )
		% {
		  <i class="fa-solid fa-gear fa-xs me-2 text-warning"></i>
		% } elsif ( $reqType eq 'delete' )
		% {
		  <i class="fa-solid fa-circle-xmark fa-xs me-2 text-danger"></i>
		% }
	      % } else {
	      % }
	      <%== h_rewrite_dn($e->dn,'<i class="fa-solid fa-square fa-2xs text-secondary text-opacity-50 mx-2"></i>') %>
	    </button>
	  % end
	</div>
	% if ( ! $e->exists('reqType') && $e->attributes > 0 ) {
	  % $ct = $e->exists('createTimestamp') ? substr($e->get_value('createTimestamp'), 0, -7) : 'na';
	  % $cn = $e->exists('creatorName')     ? substr(h_get_root_uid_val($e->get_value('creatorsName')) // $e->get_value('creatorsName'), 0, 7) : 'na';
	  % $mt = $e->exists('modifyTimestamp') ? substr($e->get_value('modifyTimestamp'), 0, -7) : 'na';
	  % $mn = $e->exists('modifiersName')   ? h_get_root_uid_val($e->get_value('modifiersName')) // substr($e->get_value('modifiersName'), 0, 7) : 'na';
	  <ul class="list-unstyled fa-ul umi-text-tiny font-monospace float-end m-0 pe-2 pt-1">
	    <li title="created GMT: <%= $ct %> by <%= $cn %>">
	      <span class="fa-li"><i class="fa-solid fa-hourglass-start fa-sm"></i></span><%= $ct %> <%== length($cn) >= 7 ? substr($cn, 0, 7) . '&mldr;' : $cn %>
	    </li>
	    <li title="modified, GMT: <%= $mt %> by <%= $mn %>">
	      <span class="fa-li"><i class="fa-solid fa-hourglass-half fa-sm"></i></span><%= $mt %> <%== length($mn) >= 7 ? substr($mn, 0, 7) . '&mldr;' : $mn %>
	    </li>
	  </ul>
	% }

      </div>

      <div class="collapse<%= ' show' if scalar @$entries == 1 %>" id="collapse-<%= $i %>">
	<div class="card card-body">

	  <div class="row">
	    <div class="col-3 text-end fw-bold fs-6">dn</div>
	    <div class="col-9 user-select-all"><%= $e->dn %></div>
	  </div>

	  %# BODY OF OBJECT
	  % my @attr_break = @{app->{cfg}->{ui}->{page}->{search}->{attr}->{break}}; #qw(pgpKey certificateRevocationList;binary umiUserBackup);
	  % my @attr_wrap = @{app->{cfg}->{ui}->{page}->{search}->{attr}->{wrap}}; #qw(grayPublicKey mu-sieveOnReceive sshPublicKey reqMod);
	  % for my $attr (sort( $e->attributes )) {
	    % next if $attr eq 'createTimestamp' || $attr eq 'creatorsName' || $attr eq 'modifyTimestamp' || $attr eq 'modifiersName';

	    % my $row_color = '';
	    % if ( ( $attr eq 'umiOvpnAddStatus' && ( $e->get_value($attr) eq 'disabled' || $e->get_value($attr) eq '0' ) )
	    %      || ( $attr eq 'umiUserCertificateNotAfter' && $now > Time::Piece->strptime($e->get_value($attr), '%Y%m%d%H%M%S') )
	    %      || ( $attr eq 'pgpKeyExpireTime' && $now > Time::Piece->strptime($e->get_value($attr), '%Y%m%d%H%M%SZ') )
	    %      || ( $attr eq 'sshPublicKey' && substr($e->get_value($attr), 0, 15) eq 'from="0.0.0.0" ' )
	    %    )
	    % {
	      % $row_color = 'text-bg-danger';
	    % }

	    <div class="row <%= $row_color %>">
	      <div class="col-3 text-end fw-bold fs-6 text-truncate"><%= $attr %></div>
	      <div class="col-9">

		% for my $attr_val (@{$e->get_value($attr, asref => 1)}) {
		  % if ($attr eq "jpegPhoto") {
		    <div class="col-12 font-monospace">
		      <img src="data:image/jpg;base64,<%= Mojo::Util::b64_encode $attr_val %>"
			   class="img-thumbnail" alt="<%= $e->dn %>">
		    </div>

		  % } elsif ( $attr eq 'gidNumber' )
		  % {
		    <a href="/search/common?search_filter=gidNumber=<%= $attr_val %>&search_base_case=ou=group,dc=nxc,dc=no"
		       class="btn btn-link btn-sm px-0<%= ' text-danger fw-bold'
						      if $attr_val eq app->{cfg}->{ldap}->{defaults}->{group}->{blocked}->{gidnumber} %>"
		    >
		      <%= $attr_val %>
		      <%= $attr_val eq app->{cfg}->{ldap}->{defaults}->{group}->{blocked}->{gidnumber}
		      ? ' / ' . app->{cfg}->{ldap}->{defaults}->{group}->{blocked}->{cn}
		      : '' %>
		    </a>

		  % } elsif ( $attr eq 'userPassword' )
		  % {
		    <%== '<i class="fa-solid fa-asterisk text-muted"></i>' x 6 %>

		  % } elsif ( $attr eq 'reqMod' )
		  % {
		    <div class="user-select-all font-monospace umi-text-tiny mb-1" style="white-space: pre;"><%= $attr_val %></div>

		  % } elsif ( grep {$attr eq $_} (@attr_break, @attr_wrap))
		  % {
		    % my $text_pre;
		    % if ( grep {$attr eq $_} @attr_break ) {
		      % $text_pre = ' text-break';
		    % } else {
		      % $text_pre = ' text-wrap';
		    % }
		    %== h_btns_cp_save_from_element( $attr, $attr . '.txt', undef, 'mb-2' );
		    % my $attr_val_processed = $attr_val;
		    % if ( $attr eq 'umiUserBackup' ) {
		      % use IO::Uncompress::Gunzip qw(gunzip $GunzipError) ;
		      % use Mojo::Util;
		      % my $decoded = Mojo::Util::b64_decode( $attr_val );
		      % gunzip \$decoded => \$attr_val_processed;
		    % }
		    <pre class="user-select-all<%= $text_pre %> umi-text-tiny" id="<%= $attr %>""><%= $attr_val_processed %></pre>

		  % } elsif ($attr eq 'userCertificate;binary' || $attr eq 'cACertificate;binary')
		  % {
		    % my $ci = $self->h_cert_info({ cert => $attr_val, ts => "%Y%m%d%H%M%S", });
		    <div class="col-12 font-monospace">
		      <small class="float-left">
			%# <pre><%= dumper $ci %></pre>
			<dl class="row">
			  % foreach my $k (sort keys %$ci) {
			    % next if $k eq 'cert';
			    % next if $k eq 'error';
			    <dt class="col-2 text-end py-0 my-0"><%= $k %></dt>
			    <dd class="col-10 text-monospace text-start py-0 my-0"><%= $ci->{$k} %></dd>
			  % }
			</dl>
		      </small>
		    </div>
		  % } else {
		    % $attr_val = $subst->{$attr}->{$attr_val} if exists $subst->{$attr}->{$attr_val};
		    <div class="col-12 font-monospace pb-1"><%= h_decode_text $attr_val %></div>
		  % }
		  % $j++
		% }

	      </div>
	    </div>

	  % }

	</div>
      </div>

    </div>

    % my $re = app->{cfg}->{ldap}->{accesslog};
    %= include 'protected/search/common-modals', dn => $e->dn, i => $i if $e->dn !~ /$re/

    % $i++;
    % $mps = '';
  % }
</div>

<script>
 $(document).ready(function() {
   let allExpanded = false; // For toggleAllBtn

   // Toggle all: Force expand or collapse all cards
   $('#toggleAllBtn').click(function() {
     const $allCollapses = $('#searchresult .collapse');
     const $toggleIcon = $('#toggleAllIcon');
     if (allExpanded) {
       $allCollapses.collapse('hide');
       $toggleIcon.removeClass('fa-compress').addClass('fa-expand');
       allExpanded = false;
     } else {
       $allCollapses.collapse('show');
       $toggleIcon.removeClass('fa-expand').addClass('fa-compress');
       allExpanded = true;
     }
   });

   // Invert all: Toggle each card individually
   $('#invertAllBtn').click(function() {
     // For each collapsible panel, toggle its current state
     $('#searchresult .collapse').each(function() {
       const $this = $(this);
       if ($this.hasClass('show')) {
	 $this.collapse('hide');
       } else {
	 $this.collapse('show');
       }
     });

%#     // Optionally, update the state of the toggleAllBtn icon and flag:
%#     // If you want to reset the overall state flag (optional):
%#     allExpanded = $('#searchresult .collapse.show').length === $('#searchresult .collapse').length;
%#     // Update the toggleAllBtn icon accordingly:
%#     $('#toggleAllIcon').toggleClass('fa-expand fa-compress');
   });
 });


</script>
