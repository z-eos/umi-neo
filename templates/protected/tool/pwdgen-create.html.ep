%# -*- mode: web; eval: (follow-mode); -*-
%#
%# original is here: https://www.xkpasswd.net/
%#

<style>

 /* =========================================================================
    ALG — Algorithm Selection Display Rules
    -------------------------------------------------------------------------
    These rules control the visibility of algorithm-specific UI blocks.
    - Wrapper class  : .alg-<type>    (applied to the parent/container)
    - Content class  : .calg          (applied to every algorithm UI block)
    - Marker class   : .on-<type>     (applied to the .calg block for that type)
    Logic:
    1. By default, all .calg blocks are visible.
    2. When a wrapper .alg-<type> is present, hide every .calg that
    does *not* have the corresponding .on-<type> marker.
    3. Special case .alg-none hides all .calg blocks.
    ========================================================================= */
 .alg-none        .calg                      { display: none; /* No algorithm selected */ }
 .alg-appleid     .calg:not(.on-appleid)     { display: none; /* Show only AppleID algorithm UI */ }
 .alg-default     .calg:not(.on-default)     { display: none; /* Show only Default algorithm UI */ }
 .alg-ntlm        .calg:not(.on-ntlm)        { display: none; /* Show only NTLM algorithm UI */ }
 .alg-securityq   .calg:not(.on-securityq)   { display: none; /* Show only Security Question algorithm UI */ }
 .alg-web16       .calg:not(.on-web16)       { display: none; /* Show only Web16 algorithm UI */ }
 .alg-web32       .calg:not(.on-web32)       { display: none; /* Show only Web32 algorithm UI */ }
 .alg-wifi        .calg:not(.on-wifi)        { display: none; /* Show only Wi-Fi algorithm UI */ }
 .alg-xkcd        .calg:not(.on-xkcd)        { display: none; /* Show only XKCD algorithm UI */ }
 .alg-classic     .calg:not(.on-classic)     { display: none; /* Show only Classic algorithm UI */ }
 .alg-userdefined .calg:not(.on-userdefined) { display: none; /* Show only User-Defined algorithm UI */ }


 /* =========================================================================
    SEPARATOR — Separator Mode Display Rules
    -------------------------------------------------------------------------
    Controls the visibility of separator configuration blocks.
    - Wrapper class : .sep-<mode>     (applied to the parent/container)
    - Content class : .csep           (applied to every separator UI block)
    - Marker class  : .on-sep-<mode>  (applied to the .csep block for that mode)
    Logic is identical to the ALG section above.
    ========================================================================= */
 .sep-none      .csep                        { display: none; /* No separator: hide all */ }
 .sep-char      .csep:not(.on-sep-char)      { display: none; /* Show only character separator UI */ }
 .sep-random    .csep:not(.on-sep-random)    { display: none; /* Show only random separator UI */ }


 /* =========================================================================
    PADDING — Padding Mode Display Rules
    -------------------------------------------------------------------------
    Controls padding configuration blocks.
    - Wrapper class : .pad-<mode>     (applied to the parent/container)
    - Content class : .cpad           (applied to every padding UI block)
    - Marker class  : .on-pad-<mode>  (applied to the .cpad block for that mode)
    ========================================================================= */
 .pad-none      .cpad                        { display: none; /* No padding: hide all */ }
 .pad-fixed     .cpad:not(.on-pad-fixed)     { display: none; /* Show only fixed padding UI */ }
 .pad-adaptive  .cpad:not(.on-pad-adaptive)  { display: none; /* Show only adaptive padding UI */ }
 .pad-char      .cpad:not(.on-pad-char)      { display: none; /* Show only character padding UI */ }


 /* =========================================================================
    PADDING CHARACTER — Padding Character Display Rules
    -------------------------------------------------------------------------
    Controls display of specific padding-character options.
    - Wrapper class : .pch-<mode>     (applied to the parent/container)
    - Content class : .cpch           (applied to every padding-character UI block)
    - Marker class  : .on-pch-<mode>  (applied to the .cpch block for that mode)
    ========================================================================= */
 .pch-none      .cpch                        { display: none; /* No padding char: hide all */ }
 .pch-character .cpch:not(.on-pch-character) { display: none; /* Show only single-character padding UI */ }
 .pch-random    .cpch:not(.on-pch-random)    { display: none; /* Show only random padding UI */ }
 .pch-separator .cpch:not(.on-pch-separator) { display: none; /* Show only separator padding UI */ }

</style>


% my ($en_blind, $en_seen, $ico, $selected);
% my $par = stash('pwdgen_params');
%# h_log stash;
% my $pwd = stash('pwdgen');

% if ( ! exists $par->{pwd_chg_dn} ) {
  <h3 class="fw-bold py-5">
    <i class="fa <%= app->{cfg}->{ui}->{menu}->{password}->{ico} %> fa-lg me-2 <%= app->{cfg}->{ui}->{menu}->{password}->{col} %>"></i>
    Password Generator Form
    <small>
      <em class="font-monospace text-muted fs-6">
	(FYI: <a href="https://xkpasswd.net/s/" target="_blank" title="XKCD stuff description is here">XKCD</a>)
      </em>
    </small>
  </h3>
% }

% if (defined $pwd && %$pwd && exists $pwd->{stats}) {
  % if ( $pwd->{stats}->{password_entropy_blind_min} < app->{cfg}->{tool}->{pwdgen}->{xk}->{cfg}->{password_entropy_blind_min} ||
  %      $pwd->{stats}->{password_entropy_blind_max} < app->{cfg}->{tool}->{pwdgen}->{xk}->{cfg}->{password_entropy_blind_max} ) {
    % $en_blind = 'danger';
  % } else {
    % $en_blind = 'success';
  % }
  % if ( $pwd->{stats}->{password_entropy_seen} > app->{cfg}->{tool}->{pwdgen}->{xk}->{cfg}->{password_entropy_seen} ) {
    % $en_seen = 'success';
  % } else {
    % $en_seen = 'danger';
  % }
  % if ($en_blind eq 'success' and $en_seen eq 'success') {
    % $ico = 'success';
  % } else {
    % $ico = 'danger';
  % }
  <div class="form-text text-end mb-3">
    <div class="text-muted text-monospace" aria-label="Statistics" aria-describedby="button-addon2">
      <i class="fas fa-info-circle text-<%= $ico %> me-2"></i>
      Entropy: blind (brute-force) <b class="text-<%= $en_blind %>">
	<%= $pwd->{stats}->{password_entropy_blind} =%>
      </b> bits & seen (given dict and config) <b class="text-<%= $en_seen %>"><%= $pwd->{stats}->{password_entropy_seen} %></b>
      <small>
	<em class="">(keep blind entropy above <%= app->{cfg}->{tool}->{pwdgen}->{xk}->{cfg}->{password_entropy_blind_min} %> & seen above <%= app->{cfg}->{tool}->{pwdgen}->{xk}->{cfg}->{password_entropy_seen} %> bits)</em>
	<button type="button" class="btn btn-link" data-bs-toggle="collapse" href="#pwdStatus"
		role=«button" aria-expanded="false" aria-controls="pwdStatus">
	  <i class="fa-regular fa-rectangle-list"></i>
	</button>
      </small>
    </div>
    <div class="collapse" id="pwdStatus">
      <div class="card card-body"><small><pre class="text-muted text-monospace"><%= $pwd->{status} %></pre></small></div>
    </div>
  </div>
% }

<form id="formPwdgen" class="form-horizonal pwdgen" method="post" enctype="multipart/form-data" action="/tool/pwdgen">

  <div id ="pwd_operations" class ="target-container">

    <div class="row input-group mb-2">
      <span class="input-group-text fw-bold text-uppercase col-3" for="xk_num_words"><span class="w-100 text-end">Preset</span></span>

      % my $m = 0;
      % my $presets = app->{cfg}->{tool}->{pwdgen}->{xk}->{preset};
      % my @alg = map {
	% $_ eq 'XKCD' ? [ $_ . ': ' . $presets->{$_} => lc 'alg-' . $_, selected => 'selected' ] : [ $_ . ': ' . $presets->{$_} => lc 'alg-' . $_ ]
      % } sort keys %$presets;
      % push @alg, [ 'USERDEFINED: input from user asis' => 'alg-userdefined' ] if is_role 'admin,coadmin', {cmp => 'or'};

	<div class='col-9'>
	%= select_field pwd_alg => \@alg, id => 'pwd_alg', class => 'ps-2 custom-select form-control text-center'
      </div>
    </div>
    <div class="row input-group mb-2">
      <div id='pwd_algHelpBlock' class='offset-3 col-9 form-text text-muted text-end umi-text-tiny mt-0'></div>
    </div>

    % if ( defined $par->{pwd_chg_dn} ) {
      %= hidden_field pwd_chg_dn => $par->{pwd_chg_dn}
    % }

    %# ---------------------------------------------------------------
    %#  ZXCVBN https://github.com/dropbox/zxcvbn?tab=readme-ov-file
    %#
    % if ( is_role 'admin,coadmin', {cmp => 'or'} ) {
      <div id="non-xkcd" class="row calg on-userdefined my-3">
	<div class="row input-group mb-2">
	  <span class="input-group-text fw-bold text-uppercase col-3" for="pwd_userdefined"><span class="w-100 text-end">Password</span></span>

	  <div class='col-9'>
	    %= text_field 'pwd_userdefined', id => 'pwd_userdefined', maxlength => 256, class => 'form-control text-center', placeholder => 'input your password here'
	  </div>
	</div>

	<div id="zxcvbn-output" class="text-secondary umi-text-xs mb-2">
	  <table class="table table-hover table-borderless table-responsive table-sm">
	    <tbody>
	      <tr>
		<th class="col-1 text-end text-uppercase me-1">Password</th>
		<td id="zxcvbn-password" class="font-monospace user-select-all"></td>
	      </tr>
	      <tr><th class="col-1 text-end text-uppercase me-1">Score</th>   <td id="zxcvbn-score"></td></tr>
	      <tr><th class="col-1 text-end text-uppercase me-1">Guesses</th> <td id="zxcvbn-guesses"></td></tr>
	      <tr><th class="col-1 text-end text-uppercase me-1">Guesses log<sub>10</sub></th><td id="zxcvbn-guesses-log10"></td></tr>
	      <tr>
		<th class="col-1 text-end text-uppercase me-1">Crack Time</th>
		<td>
		  <dl class="row">
		    <dt class="col-sm-1 text-end">100 / hour</dt><dd class="col-sm-11 p-0 m-0" id="zxcvbn-crack-time-online_throttling_100_per_hour"></dd>
		    <dt class="col-sm-1 text-end">10 / sec</dt>  <dd class="col-sm-11 p-0 m-0" id="zxcvbn-crack-time-online_no_throttling_10_per_second"></dd>
		    <dt class="col-sm-1 text-end">10k / sec</dt> <dd class="col-sm-11 p-0 m-0" id="zxcvbn-crack-time-offline_slow_hashing_1e4_per_second"></dd>
		    <dt class="col-sm-1 text-end">10B / sec</dt> <dd class="col-sm-11 p-0 m-0" id="zxcvbn-crack-time-offline_fast_hashing_1e10_per_second"></dd>
		  </dl>
		</td>
	      </tr>
	      <tr><th class="col-1 text-end text-uppercase me-1">Feedback</th><td id="zxcvbn-feedback"></td></tr>
	      <tr><th class="col-1 text-end text-uppercase me-1">Sequence</th><td>
		<details>
		  <summary></summary>
		  <div id="zxcvbn-sequence" class="ms-3"></div>
		</details>
	      </td></tr>
	    </tbody>
	  </table>
	</div>
      </div>
    % }

    <div id="xkcd" class="calg on-appleid on-default on-ntlm on-securityq on-web16 on-web32 on-wifi on-xkcd">

      %# ---------------------------------------------------------------
      %#  NUMBER OF WORDS
      %#
      <div class="row input-group mb-2">
	<span class ='input-group-text fw-bold col-3' for ='xk_num_words'><span class="w-100 text-end">WORDS: num, len min / max</span></span>

	% my @num_words = map {
	  %   [ $_ => $_, ($par->{xk_num_words} && $par->{xk_num_words} == $_ ? (selected => 'selected') : ()) ]
	% } app->{cfg}->{tool}->{pwdgen}->{xk}->{num_words}->{min} .. app->{cfg}->{tool}->{pwdgen}->{xk}->{num_words}->{max};
	<div class='col-1'>
	  %= select_field xk_num_words => \@num_words, id => 'xk_num_words', maxlength => 2, class => 'custom-select form-control text-center'
	</div>

	% my @word_length_min = map {
	  %   [ $_ => $_, ($par->{xk_word_length_min} && $par->{xk_word_length_min} == $_ ? (selected => 'selected') : ()) ]
	% } app->{cfg}->{tool}->{pwdgen}->{xk}->{word_length_min} .. app->{cfg}->{tool}->{pwdgen}->{xk}->{word_length_max};
	<div class='col-1 ps-0'>
	  %= select_field xk_word_length_min => \@word_length_min, id => 'xk_word_length_min', maxlength => 2, class => 'custom-select form-control text-center'
	</div>

	% my @word_length_max = map {
	  %   [ $_ => $_, ($par->{xk_word_length_max} && $par->{xk_word_length_max} == $_ ? (selected => 'selected') : ()) ]
	% } app->{cfg}->{tool}->{pwdgen}->{xk}->{word_length_min} .. app->{cfg}->{tool}->{pwdgen}->{xk}->{word_length_max};
	<div class='col-1 ps-0'>
	  %= select_field xk_word_length_max => \@word_length_max, id => 'xk_word_length_max', maxlength => 2, class => 'custom-select form-control text-center'
	</div>
      </div>


      %# ---------------------------------------------------------------
      %#  CASE TRANSFORMATION
      %#
      <div class="row input-group mb-2">
	<span class='input-group-text fw-bold text-uppercase col-3' for='xk_case_transform'><span class="w-100 text-end">Case Transformation</span></span>

	% my $ct = app->{cfg}->{tool}->{pwdgen}->{xk}->{case_transforms};
	% my @case_transform = map {
	  %   [ $_ . ': ' . $ct->{$_} => $_, ($par->{xk_case_transform} && $par->{xk_case_transform} eq $_ ? (selected => 'selected') : ()) ]
	% } sort keys %$ct;
	<div class='col'>
	  %= select_field xk_case_transform => \@case_transform, id => 'xk_case_transform', class => 'custom-select form-control text-center'
	</div>
      </div>


      % my $symbol_alphabet = join(' ', @{app->{cfg}->{tool}->{pwdgen}->{xk}->{symbol_alphabet}});


      %# ---------------------------------------------------------------
      %#  SEPARATOR
      %#
      <div id="sep" class="row input-group mb-2">
	<span class='input-group-text fw-bold text-uppercase col-3' for='xk_separator_character'><span class="w-100 text-end">Separator</span></span>

	% my @separator_character = map {
	  % [ $_ => lc 'sep-' . $_, ($par->{xk_separator_character} && $par->{xk_separator_character} eq $_ ? (selected => 'selected') : ()) ]
	% } ( 'NONE',
	%     'CHAR',
	%     'RANDOM' );
	<div class='col-2'>
	  %= select_field xk_separator_character => \@separator_character, id => 'xk_separator_character', class => 'custom-select form-control text-center'
	</div>

	<div class='col-1 csep on-sep-char ps-0'>
	  %= text_field 'xk_separator_character_char', id => 'xk_separator_character_char', size => 1, maxlength => 1, class => 'form-control text-center', 'data-bs-toggle' => 'tooltip', 'data-bs-title' => 'CHARACTER'
	</div>

	<div class='col-3 csep on-sep-random'>
	  %== text_field 'xk_separator_alphabet', id => 'xk_separator_alphabet', class => 'custom-select form-control text-center', title => 'Padding character will be randomly chosen from this alphabet, symbols allowed: ' . $symbol_alphabet, placeholder => $symbol_alphabet, 'data-bs-toggle' => 'tooltip', 'data-bs-title' => $symbol_alphabet
	</div>
      </div>
      <div id='sepCharHelpBlock' class ='form-control border-0 text-secondary'></div>

      %# ---------------------------------------------------------------
      %#  PADDING DIGITS
      %#
      <div id='padding_digits' class='row input-group mb-2'>
	<span class ='input-group-text fw-bold text-uppercase col-3' for ='xk_padding_digits_before'><span class="w-100 text-end">Padding Digits</span></span>

	<div class='col-1'>
	  %= text_field 'xk_padding_digits_before', id => 'xk_padding_digits_before', maxlength => 2, class => 'col custom-select form-control text-center'
	</div>

	<div class='col-1 ps-0'>
	  %= text_field 'xk_padding_digits_after' , id => 'xk_padding_digits_after', maxlength => 2,  class => 'col custom-select form-control text-center'
	</div>
      </div>


      %# ---------------------------------------------------------------
      %#  PADDING TYPE start
      %#
      <div id='padd' class='target-container cpad'>
	<div class='row input-group mb-2'>
	  <span class='input-group-text fw-bold text-uppercase col-3' for ='xk_padding_type'><span class="w-100 text-end">Padding Type</span></span>

	  <div class='col-2'>
	    % my @padding_type = map {
	      %   [ $_ => lc 'pad-' . $_, ($par->{xk_padding_type} && $par->{xk_padding_type} eq $_ ? (selected => 'selected') : ()) ]
	    % } ( 'NONE',
	    %     'FIXED',
	    %     'ADAPTIVE' );

	    %= select_field xk_padding_type => \@padding_type, id => 'xk_padding_type', class => 'custom-select form-control'
	  </div>

	  <div id='' class='col'>

	    %# -- padding type: fixed
	    <div class='input-group cpad on-pad-fixed'>

	      <span class='input-group-text fw-bold text-uppercase col-4 me-2' for='xk_padding_character_before'><span class="w-100 text-end">char before / after</span></span>
	      <div class='col-1 me-2'>
		%= text_field 'xk_padding_characters_before', id => 'xk_padding_characters_before', maxlength => 2, class => 'col form-control text-center'
	      </div>
	      <div class='col-1'>
		%= text_field 'xk_padding_characters_after',  id => 'xk_padding_characters_after', maxlength => 2, class => 'col form-control text-center'
	      </div>
	    </div>

	    %# -- padding type: adaptive
	    <div class='col input-group cpad on-pad-adaptive'>
	      <span class='input-group-text fw-bold text-uppercase col-1 me-2' for='xk_padding_character_before'>to</span>
	      <div class='col-1'>
		%= text_field 'xk_pad_to_length', id => 'xk_pad_to_length', class => 'custom-select form-control text-center', title => 'an integer greater than or equal to 12'
	      </div>
	    </div>

	  </div>

	</div>

	%# both padding types: fixed and adaptive
	<div id='pch' class='row input-group cpad on-pad-fixed on-pad-adaptive'>
	  <div class="col-3"></div>
	  <div class='col-3'>
	    % my @padding_character = map {
	      %   [ $_ => lc 'pch-' . $_, ($par->{xk_padding_character} && $par->{xk_padding_character} eq $_ ? (selected => 'selected') : ()) ]
	    % } ( 'SEPARATOR',
	    %     'CHARACTER',
	    %     'RANDOM' );
	    %= select_field xk_padding_character => \@padding_character, id => 'xk_padding_character', class => 'custom-select form-control text-center'
	  </div>
	  <div class='col-1 ps-0 cpch  on-pch-character'>
	    %= text_field 'xk_padding_character_char', id => 'xk_padding_character_char', class => 'custom-select form-control text-center'
	  </div>
	  <div class='col-3 ps-0 cpch on-pch-random'>
	    %== text_field 'xk_padding_alphabet', id => 'xk_padding_alphabet', class => 'custom-select form-control text-center', title => 'Padding character will be randomly chosen from this alphabet, symbols allowed: ' . $symbol_alphabet, placeholder => $symbol_alphabet
	  </div>
	  <div id='pchCharHelpBlock' class ='form-control border-0 text-secondary'></div>
	</div>

      </div>
      %#
      %# PADDING TYPE stop
      %# ---------------------------------------------------------------

    </div>
  </div>

  <div class ='row'>
    %= tag 'button', class => 'col-2 btn btn-success my-3 me-2 fw-bold text-uppercase', type => 'submit', 'ok'
  </div>

</form>

<pre class="mt-5 umi-text-tiny text-muted"><%= dumper stash->{'mojo.validation'}->{error} if %{stash->{'mojo.validation'}->{error}} %></pre>

% if ( stash->{'mojo.validation'}->{error} ) {
  <script>
   % while (my ($k, $v) = each %{stash->{'mojo.validation'}->{error}}) {
     $('#<%= $k %>').addClass('is-invalid').after('<div id="<%= $k %>ValidationFeedback" class="invalid-feedback"></div>');
     % if (scalar(@$v) == 1) {
     $('#<%= $k %>ValidationFeedback').text('<%= $v->[0] %>');
     % } else {
     $('#<%= $k %>ValidationFeedback').text('is not <%= $v->[0] %>: <%= $v->[2] %>');
     % }
   % }
  </script>
% }

<script>

 /**
  * ========================================================================
  * pwdgen-scripts.js
  * ------------------------------------------------------------------------
  * JavaScript for managing UI state in the password generator tool.
  * Relates to CSS display rules (alg-, sep-, pad-, pch- wrappers).
  * Organized into:
  *   1. Preset definitions
  *   2. Utility: updateClassWithPrefix
  *   3. Preset loader: loadPreset
  *   4. Event handlers:
  *      - Algorithm selection
  *      - Separator configuration
  *      - Padding type
  *      - Padding character
  *   5. Initialization calls
  * ========================================================================
  */

 // ------------------------------------------------------------------------
 // 1. Preset Definitions
 // ------------------------------------------------------------------------
 // xkPresets.defined_presets: list of preset keys
 // xkPresets.preset_descriptions: human-readable descriptions
 // xkPresets.presets: detailed settings for each preset
 var xkPresets = {
   "defined_presets": [
     "APPLEID", "NTLM", "SECURITYQ", "WEB16", "WEB32", "WIFI", "XKCD", "USERDEFINED"
   ],
   "preset_descriptions": {
     "APPLEID":    "A preset respecting the many prerequisites Apple places on Apple ID passwords. ...",
     "NTLM":       "A preset for 14 character Windows NTLMv1 password. WARNING - only use ...",
     "SECURITYQ":  "A preset for creating fake answers to security questions.",
     "WEB16":      "A preset for websites that insist passwords not be longer than 16 characters. ...",
     "WEB32":      "A preset for websites that allow passwords up to 32 characters long.",
     "WIFI":       "A preset for generating 63 character long WPA2 keys ...",
     "XKCD":       "A preset for generating passwords similar to the original XKCD cartoon ...",
     "USERDEFINED": "input from user asis"
   },
   "presets": {
     /* Each preset object maps configuration keys to values:
      *   allow_accents, case_transform, num_words, padding_*, separator_*, word_length_*
      */
     "APPLEID": {
       "allow_accents": 0,
       "case_transform": "RANDOM",
       "num_words": 3,
       "padding_alphabet": [
	 "-", ":", ".", "!", "?", "@", "&"
       ],
       "padding_character": "RANDOM",
       "padding_characters_after": 1,
       "padding_characters_before": 1,
       "padding_digits_after": 2,
       "padding_digits_before": 2,
       "padding_type": "FIXED",
       "separator_alphabet": [
	 "-", ":", ".", "@", ",", " "
       ],
       "separator_character": "RANDOM",
       "word_length_max": 7,
       "word_length_min": 4
     },
     "NTLM": {
       "allow_accents": 0,
       "case_transform": "INVERT",
       "num_words": 2,
       "padding_alphabet": [
	 "!", "@", "$", "%", "^", "&", "*", "+", "=", ":", "|", "~", "?"
       ],
       "padding_character": "RANDOM",
       "padding_characters_after": 1,
       "padding_characters_before": 0,
       "padding_digits_after": 0,
       "padding_digits_before": 1,
       "padding_type": "FIXED",
       "separator_alphabet": [
	 "-", "+", "=", ".", "*", "_", "|", "~", ","
       ],
       "separator_character": "RANDOM",
       "word_length_max": 5,
       "word_length_min": 5
     },
     "SECURITYQ": {
       "allow_accents": 0,
       "case_transform": "NONE",
       "num_words": 6,
       "padding_alphabet": [ ".", "!", "?" ],
       "padding_character": "RANDOM",
       "padding_characters_after": 1,
       "padding_characters_before": 0,
       "padding_digits_after": 0,
       "padding_digits_before": 0,
       "padding_type": "FIXED",
       "separator_character": " ",
       "word_length_max": 8,
       "word_length_min": 4
     },
     "WEB16": {
       "allow_accents": 0,
       "case_transform": "RANDOM",
       "num_words": 3,
       "padding_digits_after": 2,
       "padding_digits_before": 0,
       "padding_type": "NONE",
       "separator_character": "RANDOM",
       "symbol_alphabet": [
	 "!", "@", "$", "%", "^", "&", "*", "-", "_", "+", "=", ":", "|", "~", "?", "/", ".", ";"
       ],
       "word_length_max": 4,
       "word_length_min": 4
     },
     "WEB32": {
       "allow_accents": 0,
       "case_transform": "ALTERNATE",
       "num_words": 4,
       "padding_alphabet": [
	 "!", "@", "$", "%", "^", "&", "*", "+", "=", ":", "|", "~", "?"
       ],
       "padding_character": "RANDOM",
       "padding_characters_after": 1,
       "padding_characters_before": 1,
       "padding_digits_after": 2,
       "padding_digits_before": 2,
       "padding_type": "FIXED",
       "separator_alphabet": [
	 "-", "+", "=", ".", "*", "_", "|", "~", ","
       ],
       "separator_character": "RANDOM",
       "word_length_max": 5,
       "word_length_min": 4
     },
     "WIFI": {
       "allow_accents": 0,
       "case_transform": "RANDOM",
       "num_words": 6,
       "pad_to_length": 63,
       "padding_alphabet": [
	 "!", "@", "$", "%", "^", "&", "*", "+", "=", ":", "|", "~", "?"
       ],
       "padding_character": "RANDOM",
       "padding_digits_after": 4,
       "padding_digits_before": 4,
       "padding_type": "ADAPTIVE",
       "separator_alphabet": [
	 "-", "+", "=", ".", "*", "_", "|", "~", ","
       ],
       "separator_character": "RANDOM",
       "word_length_max": 8,
       "word_length_min": 4
     },
     "XKCD": {
       "allow_accents": 0,
       "case_transform": "RANDOM",
       "num_words": 5,
       "padding_digits_after": 0,
       "padding_digits_before": 0,
       "padding_type": "NONE",
       "separator_character": "-",
       "word_length_max": 8,
       "word_length_min": 4
     },
     "USERDEFINED": {

     }
   }
 };

 // Data posted from server to override presets (if any)
 var onPost = "";

 // ------------------------------------------------------------------------
 // 2. Utility: updateClassWithPrefix
 // ------------------------------------------------------------------------
 /**
  * Removes any existing classes on $node that start with `prefix`,
  * then adds `newClass`.
  *
  * @param {jQuery} $node    Container element to update
  * @param {string} prefix   Class-name prefix to strip (e.g. 'alg-')
  * @param {string} newClass New class to apply (e.g. 'alg-appleid')
  */
 function updateClassWithPrefix($node, prefix, newClass) {
   $node
     .removeClass(function(_i, classNames) {
       return classNames
	 .split(/\s+/)
	 .filter(function(c) { return c.indexOf(prefix) === 0; })
	 .join(' ');
     })
     .addClass(newClass);
 }

 // ------------------------------------------------------------------------
 // 3. Preset Loader: loadPreset
 // ------------------------------------------------------------------------
 /**
  * Loads preset values into form controls and updates helper text.
  * If onPost is set, uses that data instead of xkPresets.
  *
  * @param {Object} presets    xkPresets object
  * @param {string} presetName Key of the preset (e.g. 'APPLEID')
  */
 function loadPreset(presets, presetName) {
   console.log('onPost: →' + onPost + '←');
   var preset = onPost === '' ? presets.presets[presetName] : onPost;
   onPost = '';

   // Update description block
   var descr = presets.preset_descriptions[presetName];
   if (descr) $('#pwd_algHelpBlock').html(descr);
   if (!preset) return;

   // Iterate through each key in the preset
   Object.keys(preset).forEach(function(key) {
     var value = preset[key];

     // Separator character logic: single char vs RANDOM vs NONE
     if (key === 'separator_character') {
       if (value.length === 1) {
	 $('#xk_' + key).val('sep-char').change();
	 $('#xk_' + key + '_char').val(value);
       } else if (value === 'RANDOM') {
	 $('#xk_' + key).val('sep-random').change();
	 if (preset.separator_alphabet) {
	   $('#xk_separator_alphabet').val(preset.separator_alphabet.join(''));
	 }
       } else if (value === 'NONE') {
	 $('#xk_' + key).val('sep-none').change();
       }

       // Padding type logic
     } else if (key === 'padding_type') {
       $('#xk_' + key).val('pad-' + value.toLowerCase()).change();

       // Padding character logic
     } else if (key === 'padding_character') {
       $('#xk_' + key).val('pch-' + value.toLowerCase()).change();
       var alph = preset.padding_alphabet || presets.presets['DEFAULT'].symbol_alphabet;
       $('#xk_padding_alphabet').val(alph.join(''));

       // Default: direct value assignment
     } else {
       $('#xk_' + key).val(value);
     }
   });
 }

 // ------------------------------------------------------------------------
 // 4. Event Handlers
 // ------------------------------------------------------------------------

 // 4.1 Algorithm selection
 $('#pwd_operations').on('change', 'select[id=pwd_alg]', function() {
   var $container = $(this).closest('.target-container');
   var value = $(this).val().toLowerCase(); // .slice(4); // strip 'alg-'

   /* // Show or hide #one and #two based on the selected algorithm
      if (value === 'userdefined') {
      // Show #one and hide #two when alg-userdefined is chosen
      $('#non-xkcd').show();
      $('#xkcd').hide();
      } else {
      // Hide #one and show #two for all other selections
      $('#non-xkcd').hide();
      $('#xkcd').show();
      } */

   if (xkPresets) {
     loadPreset(xkPresets, value.toUpperCase());
     // Trigger char-separator update
     $('#xk_separator_character_char').change();
   }

   updateClassWithPrefix($container, 'alg-', value || 'none');
 }).change();


 // 4.2 Separator selection
 $('#sep').on('change', '#xk_separator_character', function() {
   var $container = $(this).closest('.target-container');
   var value = $(this).val().toLowerCase();
   updateClassWithPrefix($container, 'sep-', value || 'none');
 }).change();

 // Relocate help text into its own flex column (matched in CSS .csep rules)
 (function relocateHelpBlock() {
   const parentDiv = $('#xk_separator_character_char').parent();
   const newDiv = $('<div>').attr('class', parentDiv.attr('class')); // clone classes
   $('#sepCharHelpBlock').appendTo(newDiv);     // move <i> into new flex column
   newDiv.insertAfter(parentDiv);
 })();

 // 4.2.1 Separator char input -> update ASCII/char code display
 function updateSepCharHelp() {
   var val = $('#xk_separator_character_char').val();
   if (!val) {
     $('#sepCharHelpBlock').html('');
     return;
   }
   var code = val.charCodeAt(0);
   var type = code < 255 ? 'ASCII' : 'char';
   $('#sepCharHelpBlock').html(type + ': ' + code);
 }

 $('#xk_separator_character_char').on('input', updateSepCharHelp);

 // 4.2.2 Padding type fixed/adaptive char input -> update ASCII/char code display
 function updatePchCharHelp() {
   var val = $('#xk_padding_character_char').val();
   if (!val) {
     $('#pchCharHelpBlock').html('');
     return;
   }
   var code = val.charCodeAt(0);
   var type = code < 255 ? 'ASCII' : 'char';
   $('#pchCharHelpBlock').html(type + ': ' + code);
 }

 $('#xk_padding_character_char').on('input', updatePchCharHelp);

 // ------------------------------------------------------------------------
 // 4.3 Padding type selection
 // ------------------------------------------------------------------------
 $('#padd').on('change', '#xk_padding_type', function() {
   var $container = $(this).closest('.target-container');
   var value = $(this).val().toLowerCase();
   updateClassWithPrefix($container, 'pad-', value || 'none');
 }).change();

 // ------------------------------------------------------------------------
 // 4.4 Padding character selection
 // ------------------------------------------------------------------------
 $('#pch').on('change', '#xk_padding_character', function() {
   var $container = $(this).closest('.target-container');
   var value = $(this).val().toLowerCase();
   updateClassWithPrefix($container, 'pch-', value || 'none');
 }).change();

 // ------------------------------------------------------------------------
 // 5. Initialization: trigger default "change" and "input" events to set initial state
 // ------------------------------------------------------------------------
 $('#pwd_alg').change();
 $('#xk_padding_type').change();
 $('#xk_separator_character').change();
 $('#xk_padding_character').change();
 // Also update separator-char help display on page load
 updateSepCharHelp();

</script>

% if ( is_role 'admin,coadmin', {cmp => 'or'} ) {

  <script src="https://cdn.jsdelivr.net/npm/zxcvbn@4.4.2/dist/zxcvbn.js"></script>
  <script>
   $('#pwd_userdefined').on('input', function () {
     const val = $(this).val();

     if (val.length === 0) {
       $('#zxcvbn-output > div').empty();
       return;
     }

     const result = zxcvbn(val);
     console.log(result);
     // Fill each section
     $('#zxcvbn-password').html(`${result.password}`);
     var cl;
     if ( result.score < 2 ) {
       cl = 'text-danger';
     } else if ( result.score > 3 ) {
       cl = 'text-success';
     } else {
       cl = 'text-warning';
     }
     $('#zxcvbn-score').html(`<span class="${cl}">${result.score} / 4</span>`);
     $('#zxcvbn-guesses').html(`${result.guesses.toLocaleString()}`);
     $('#zxcvbn-guesses-log10').html(`${result.guesses_log10.toFixed(2)}`);
     $('#zxcvbn-crack-time-online_throttling_100_per_hour').html(`${result.crack_times_display.online_throttling_100_per_hour}`);
     $('#zxcvbn-crack-time-online_no_throttling_10_per_second').html(`${result.crack_times_display.online_no_throttling_10_per_second}`);
     $('#zxcvbn-crack-time-offline_slow_hashing_1e4_per_second').html(`${result.crack_times_display.offline_slow_hashing_1e4_per_second}`);
     $('#zxcvbn-crack-time-offline_fast_hashing_1e10_per_second').html(`${result.crack_times_display.offline_fast_hashing_1e10_per_second}`);

     const feedback = result.feedback;
     const feedbackText = feedback.warning || feedback.suggestions.length
			? [feedback.warning, ...feedback.suggestions].filter(Boolean).join('. ') + '.'
			: 'No feedback';
     $('#zxcvbn-feedback').html(`${feedbackText}`);

     // Optional: detailed breakdown of sequence
     const seq = result.sequence.map((entry, idx) =>
       `<div><strong>Match ${idx + 1}:</strong><pre class="mb-2">${JSON.stringify(entry, null, 2)}</pre></div>`
     ).join('');
     $('#zxcvbn-sequence').html(`${seq}`);
   });
  </script>

% }
