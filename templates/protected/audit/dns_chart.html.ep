%# -*- mode: web; eval: (follow-mode) -*-
<link href="/assets/js/datatables/datatables.min.css" rel="stylesheet" type="text/css">

<h1 class="mt-3 mb-4">Domains usage frequencies</h1>

% my ($insts_str, %insts, $inst_id);

% my $freq = stash->{freq};
% if ( defined $freq ) {

  <!-- ECharts Library -->
  <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>

  <!-- Chart Container -->
  <div id="myChart" style="width: 100%; max-width: 1024px; height: 768px;" class="mx-auto"></div>

  <script>
   // Mojo-provided data
   const chartData = <%== $freq %>;

   // Extract labels and values
   const labels = Object.keys(chartData);
   const values = Object.values(chartData);

   // Bootstrap 5 theme detection
   const isDark = document.documentElement.getAttribute('data-bs-theme') === 'dark';

   // Colors provided by your config
   //const colorPalette = [ '<%== join "', '", @{app->{cfg}->{tool}->{dns}->{chart}->{colors}} %>' ];

   const rootStyles = getComputedStyle(document.documentElement);

   const colorPalette = [
     rootStyles.getPropertyValue('--bs-danger').trim(),   // --bs-danger (typically red)
     rootStyles.getPropertyValue('--bs-warning').trim(),  // --bs-warning
     rootStyles.getPropertyValue('--bs-success').trim(),  // --bs-success
     rootStyles.getPropertyValue('--bs-info').trim(),     // --bs-info
     rootStyles.getPropertyValue('--bs-primary').trim(),  // --bs-primary
     rootStyles.getPropertyValue('--bs-secondary').trim(),// --bs-secondary
     rootStyles.getPropertyValue('--bs-dark').trim(),     // --bs-dark
     rootStyles.getPropertyValue('--bs-light').trim(),    // --bs-light
     rootStyles.getPropertyValue('--bs-teal')?.trim() || '#20c997', // Fallback
     rootStyles.getPropertyValue('--bs-orange')?.trim() || '#fd7e14',
     rootStyles.getPropertyValue('--bs-pink')?.trim() || '#d63384',
     rootStyles.getPropertyValue('--bs-indigo')?.trim() || '#6610f2',
     rootStyles.getPropertyValue('--bs-purple')?.trim() || '#6f42c1',
     rootStyles.getPropertyValue('--bs-gray')?.trim() || '#6c757d',
     rootStyles.getPropertyValue('--bs-blue')?.trim() || '#0d6efd'
   ];

   // Compose series data
   const seriesData = labels.map((label, idx) => ({
     value: values[idx],
     name: label
   }));

   // Initialize chart
   const myChart = echarts.init(document.getElementById('myChart'), null, {
     renderer: 'canvas',
     useDirtyRect: false
   });

   // Chart options
   const option = {
     backgroundColor: 'transparent',
     tooltip: {
       trigger: 'item',
       formatter: '{b}: {c} ({d}%)'
     },
     legend: {
       // orient: 'vertical',
       // right: 10,
       top: 'bottom',
       textStyle: {
	 color: isDark ? '#dee2e6' : '#212529',
	 fontFamily: 'inherit',
	 fontSize: 12
       }
     },
     series: [
       {
	 name: 'Top items',
	 type: '<%= app->{cfg}->{tool}->{dns}->{chart}->{type} %>',
	 radius: ['10%', '90%'],
	 avoidLabelOverlap: true,
	 roseType: 'area',
	 itemStyle: {
	   borderRadius: 5,
	   //borderColor: isDark ? '#212529' : '#ffffff',
	   //borderColor: rootStyles.getPropertyValue('--bs-gray')?.trim() || '#6c757d',
	   borderColor: isDark ? '#ffffff' : '#000000',
	   borderWidth: 1
	 },
	 label: {
	   show: false
	 },
	 emphasis: {
	   label: {
	     show: true,
	     fontWeight: 'bold'
	   }
	 },
	 labelLine: {
	   show: false
	 },
	 data: seriesData
       }
     ],
     color: colorPalette
   };

   // Render chart
   myChart.setOption(option);

   // Handle theme change dynamically (if supported by your app)
   const observer = new MutationObserver(() => {
     const isNowDark = document.documentElement.getAttribute('data-bs-theme') === 'dark';
     option.legend.textStyle.color = isNowDark ? '#dee2e6' : '#212529';
     option.series[0].itemStyle.borderColor = isNowDark ? '#212529' : '#ffffff';
     myChart.setOption(option);
   });

   observer.observe(document.documentElement, { attributes: true, attributeFilter: ['data-bs-theme'] });
  </script>

% }
