%# -*- mode: web; eval: (follow-mode) -*-

% my $state = stash->{state};
% $state = 'all' if ! defined $state;

<h1 class="mt-3 mb-4">
  Employees (<%= $state %>) ages
</h1>

% my $data = stash->{chart};
% if ( $data ) {

  <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>

  <div id="ageChart" style="width: 100%; max-width: 1024px; height: 768px;" class="m-0 p-0"></div>

  <script>

   /*
    * https://echarts.apache.org/en/option.html
    *                                           */

   // Example JS code to render an ECharts stacked bar chart with 4 ISO/IEC 5218 genders
   const people = <%== $data %>;

   const binLabels = [
     '15–19', '20–24', '25–29', '30–34',
     '35–39', '40–44', '45–49', '50–54',
     '55–59', '60–64', '65–69', '70+'
   ];
   const binCount = binLabels.length;

   // Initialize bins for each gender
   const genders = {
     0: { label: 'Not known', color: getBootstrapVar('--bs-secondary'), data: Array(binCount).fill(0) },
     1: { label: 'Male', color: getBootstrapVar('--bs-primary'), data: Array(binCount).fill(0) },
     2: { label: 'Female', color: getBootstrapVar('--bs-pink'), data: Array(binCount).fill(0) },
     9: { label: 'Not applicable', color: getBootstrapVar('--bs-warning'), data: Array(binCount).fill(0) }
   };

   // Fill bins
   people.forEach(({ age, gender }) => {
     let index = Math.floor((age - 15) / 5);
     if (index < 0) index = 0;
     if (index >= binCount) index = binCount - 1;
     if (!genders[gender]) return;
     genders[gender].data[index]++;
   });

   // Convert to ECharts series format
   const series = Object.values(genders).map(g => ({
     name: g.label,
     type: 'bar',
     stack: 'gender',
     itemStyle: { color: g.color },
     emphasis: { focus: 'series' },
     data: g.data
   }));

   const chart = echarts.init(document.getElementById('ageChart'));
   chart.setOption({
     tooltip: {
       trigger: 'axis',
       axisPointer: { type: 'shadow' }
     },
     legend: {
       top: 'top',
       itemWidth: 10,
       itemHeight: 10,
       icon: 'rect',
       textStyle: {
	 color: getBootstrapVar('--bs-secondary')
       }
     },
     xAxis: {
       type: 'category',
       data: binLabels,
       name: 'Age Group',
       nameLocation: 'middle',
       nameGap: 30,
       axisLabel: { color: getBootstrapVar('--bs-secondary') },
       nameTextStyle: { color: getBootstrapVar('--bs-secondary'), fontWeight: 'bold' }
     },
     yAxis: {
       type: 'value',
       name: 'Count',
       axisLabel: { color: getBootstrapVar('--bs-secondary') },
       nameTextStyle: { color: getBootstrapVar('--bs-secondary'), fontWeight: 'bold' }
     },
     grid: {
       left: '40px', right: '20px', top: '60px', bottom: '50px', containLabel: true
     },
     series
   });

   function getBootstrapVar(varName) {
     return getComputedStyle(document.body).getPropertyValue(varName).trim() || '#ccc';
   }


   %#    const ages = [ <%== join ', ', @$data %> ];
   %#    // Define bins and labels
   %#    const binLabels = [
   %#      '15–19', '20–24', '25–29', '30–34',
   %#      '35–39', '40–44', '45–49', '50–54',
   %#      '55–59', '60–64', '65–69', '70+'
   %#    ];
   %#    const bins = Array(binLabels.length).fill(0);
   %#
   %#    // Fill bins
   %#    ages.forEach(age => {
   %#      let index = Math.floor((age - 15) / 5);
   %#      if (index < 0) index = 0;
   %#      if (index >= bins.length) index = bins.length - 1;
   %#      bins[index]++;
   %#    });
   %#
   %#    const total = ages.length;
   %#    const min = Math.min(...bins);
   %#    const max = Math.max(...bins);
   %#
   %#    // Bootstrap contextual classes in gradient order
   %#    const bsClasses = ['danger', 'warning', 'info', 'primary', 'success'];
   %#
   %#    // Map value to bootstrap class by percentile
   %#    function getBootstrapColor(value) {
   %#      const percent = (value - min) / (max - min || 1); // avoid 0-div
   %#      const step = Math.floor(percent * (bsClasses.length - 1));
   %#      const varName = `--bs-${bsClasses[step]}`;
   %#      return getComputedStyle(document.body).getPropertyValue(varName).trim() || '#999';
   %#    }
   %#
   %#    const seriesData = bins.map((count, idx) => ({
   %#      value: count,
   %#      name: binLabels[idx],
   %#      itemStyle: {
   %#        color: getBootstrapColor(count)
   %#      }
   %#    }));
   %#
   %#    const chart = echarts.init(document.getElementById('ageChart'));
   %#    chart.setOption({
   %#      tooltip: {
   %#        trigger: 'item',
   %#        formatter: '{b}: {c} ({d}%)'
   %#      },
   %#      xAxis: {
   %#        type: 'category',
   %#        data: binLabels,
   %#        name: 'Age Group',
   %#        nameLocation: 'middle',  // or 'center'
   %#        nameGap: 30,             // distance from axis
   %#        nameTextStyle: {
   %#	 color: getComputedStyle(document.body).getPropertyValue('--bs-secondary') || '#212529',
   %#	 fontWeight: 'bold'
   %#        },
   %#        axisLabel: {
   %#	 color: getComputedStyle(document.body).getPropertyValue('--bs-secondary') || '#212529'
   %#        }
   %#      },
   %#      yAxis: {
   %#        type: 'value',
   %#        name: 'Employees',
   %#        nameTextStyle: {
   %#	 color: getComputedStyle(document.body).getPropertyValue('--bs-secondary') || '#212529',
   %#	 fontWeight: 'bold'
   %#        },
   %#        axisLabel: {
   %#	 color: getComputedStyle(document.body).getPropertyValue('--bs-secondary') || '#212529'
   %#        }
   %#      },
   %#      grid: {
   %#        left: '40px',
   %#        right: '20px',
   %#        top: '30px',
   %#        bottom: '50px',
   %#        containLabel: true
   %#      },
   %#      series: [{
   %#        type: 'bar',
   %#        data: seriesData,
   %#        barWidth: '60%'
   %#      }]
   %#    });

  </script>

% }
