%# -*- mode: web; eval: (follow-mode) -*-
<link href="/assets/js/datatables/datatables.min.css" rel="stylesheet" type="text/css">

<h1 class="mt-3 mb-4">
  Domain occurrence frequency in LDAP objects
  <i class="text-body-secondary fs-4">(top <%= app->{cfg}->{tool}->{dns}->{chart}->{top_number} %> domains)</i>
</h1>

<p>This chart displays the relative frequency of DNS domain names found in LDAP directory entries.</p>
<p>Each slice represents a domain name; the size of the slice is proportional to the number of times the domain occurs.</p>
<p>The visualization uses a rose-type doughnut layout (petals sized by area) to emphasize differences in frequency.</p>
<p>A vertical legend on the right shows each domain name along with its percentage of the total occurrences.</p>
<p>This visual helps quickly identify the most prevalent domains in the directory.</p>

% my ($insts_str, %insts, $inst_id);

% my $freq = stash->{freq};
% if ( defined $freq ) {

  <script src="https://cdn.jsdelivr.net/npm/echarts@5.4.3/dist/echarts.min.js"></script>

  <div id="myChart" style="width: 100%; max-width: 1024px; height: 768px;" class="vh-100 m-0 p-0"></div>

  <script>

   /*
    * https://echarts.apache.org/en/option.html
    *                                           */

   const chartData = <%== $freq %>;

   // Extract labels and values
   const labels = Object.keys(chartData);
   const values = Object.values(chartData);

   // Bootstrap 5 theme detection
   const isDark = document.documentElement.getAttribute('data-bs-theme') === 'dark';

   const rootStyles = getComputedStyle(document.documentElement);

   const colorPalette = [
     rootStyles.getPropertyValue('--bs-danger').trim(),
     rootStyles.getPropertyValue('--bs-warning').trim(),
     rootStyles.getPropertyValue('--bs-success').trim(),
     rootStyles.getPropertyValue('--bs-info').trim(),
     rootStyles.getPropertyValue('--bs-primary').trim(),
     rootStyles.getPropertyValue('--bs-secondary').trim(),
     rootStyles.getPropertyValue('--bs-teal')?.trim() || '#20c997',
     rootStyles.getPropertyValue('--bs-orange')?.trim() || '#fd7e14',
     rootStyles.getPropertyValue('--bs-pink')?.trim() || '#d63384',
     rootStyles.getPropertyValue('--bs-indigo')?.trim() || '#6610f2',
     rootStyles.getPropertyValue('--bs-purple')?.trim() || '#6f42c1',
     rootStyles.getPropertyValue('--bs-gray')?.trim() || '#6c757d',
     rootStyles.getPropertyValue('--bs-blue')?.trim() || '#0d6efd'
   ];

   // Compose series data
   const seriesData = labels.map((label, idx) => ({
     value: values[idx],
     name: label
   }));
   // Sort in descending order by value
   seriesData.sort((a, b) => b.value - a.value);
   const total = seriesData.reduce((sum, item) => sum + item.value, 0);

   // Initialize chart
   const myChart = echarts.init(document.getElementById('myChart'), null, {
     renderer: 'canvas',
     useDirtyRect: false
   });

   // Chart options
   const option = {
     title: {
       text: 'Domain occurrence frequency in LDAP objects',
       textStyle: {
	 color: rootStyles.getPropertyValue('--bs-secondary').trim()
       }
     },
     backgroundColor: 'transparent',
     tooltip: {
       trigger: 'item',
       formatter: '{b}: {c} ({d}%)'
     },
     legend: {
       show: true,
       orient: 'vertical',
       right: 20,
       top: 20,
       itemWidth: 10,
       itemHeight: 10,
       icon: 'rect',
       itemStyle: {
	 borderWidth: 0
       },
       formatter: function (name) {
	 const item = seriesData.find(d => d.name === name);
	 if (item) {
	   const percent = ((item.value / total) * 100).toFixed(0); // like tooltip {d}%
	   return `${name} (${percent}%)`;
	 }
	 return name;
       },
       textStyle: {
	 color: rootStyles.getPropertyValue('--bs-secondary').trim()
       }
     },
     series: [
       {
	 name: 'Top items',
	 type: '<%= app->{cfg}->{tool}->{dns}->{chart}->{type} %>',
	 radius: ['30%', '70%'],
	 center: ['35%', '35%'],
	 avoidLabelOverlap: true,
	 roseType: 'area',
	 itemStyle: {
	   borderRadius: 0,
	   borderColor: rootStyles.getPropertyValue('--bs-secondary').trim(),
	   borderWidth: 1
	 },
	 label: {
	   show: false
	 },
	 data: seriesData
       }
     ],
     color: colorPalette
   };

   // Render chart
   myChart.setOption(option);

   const observer = new MutationObserver(() => {
     const isNowDark = document.documentElement.getAttribute('data-bs-theme') === 'dark';
     option.legend.textStyle.color = rootStyles.getPropertyValue('--bs-secondary').trim();
     option.series[0].itemStyle.borderColor = rootStyles.getPropertyValue('--bs-secondary').trim();
     myChart.setOption(option);
   });

   observer.observe(document.documentElement, { attributes: true, attributeFilter: ['data-bs-theme'] });

  </script>

% }
