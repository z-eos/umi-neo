%# -*- mode: web; eval: (follow-mode) -*-

<h3 class="fw-bold p-5">
  <i class="fas fa-user-friends fa-lg mr-3 text-muted"></i>
  New NetGroup <small><em class="text-muted font-monospace"></em></small>
</h3>
<hr>

% my $em = stash->{emploees};
%= form_for '/netgroup/new' => {class => "form-horizontal"} => (method => 'POST') => begin

  <div class="row mb-3">
    %= label_for cn => 'CN', class => 'col-sm-2 col-form-label text-end fw-bold text-uppercase'
    <div class="col-sm-10">
      %= text_field 'cn', class => 'form-control', id => 'cn', placeholder => 'Group name'
    </div>
  </div>

  <div class="row mb-3">
    %= label_for description => 'Description', class => 'col-sm-2 col-form-label text-end fw-bold text-uppercase'
    <div class="col-sm-10">
      %= text_area 'description', cols => 3, class => 'form-control', placeholder => 'Short description'
    </div>
  </div>

  <div class="btn-group" role="group">
    <button type="button" class="btn btn-secondary btn-sm" id="cloneButton">
      <i class="fa-solid fa-fw fa-clone text-success-emphasis"></i>
    </button>
    <button type="button" class="btn btn-secondary btn-sm" id="deleteButton">
      <i class="fa-solid fa-fw fa-trash text-danger-emphasis"></i>
    </button>
  </div>

  <div id="to-clone" class="border border-1 m-2 p-2">
    <div class="row mb-3" title="">
      %= label_for memberUid => 'Member:', class => 'col-sm-2 col-form-label text-end fw-bold text-uppercase'
      <div class="col-sm-10">
	%= select_field 'memberUid' => stash->{emploees}, id => 'memberUid', class => 'form-select select2', multiple => 'multiple'
      </div>
    </div>

    <div class="row" title="">
      %= label_for hosts => 'Hosts:', class => 'col-sm-2 col-form-label text-end fw-bold text-uppercase'
      <div class="col-sm-10">
	%= select_field 'hosts' => stash->{hosts}, id => 'hosts', class => 'form-select', multiple => 'multiple'
      </div>
    </div>
  </div>

  <div id="clones-container" class="border border-1 m-2 p-2"></div>

  %= submit_button 'Submit', class => 'btn btn-success font-weight-bold text-uppercase text-end mt-3'

% end

% my $tuples = stash->{tuples};
<pre class="p-5 font-monospace umi-text-tiny"><%= dumper $tuples if defined $tuples %></pre>
% my $result = stash->{result};
<pre class="p-5 font-monospace umi-text-tiny"><%= dumper $result if defined $result %></pre>

<pre class="mt-5 umi-text-tiny text-muted"><%= dumper stash->{'mojo.validation'}->{error} if %{stash->{'mojo.validation'}->{error}} %></pre>

% if ( stash->{'mojo.validation'}->{error} ) {
  <script>
   % while (my ($k, $v) = each %{stash->{'mojo.validation'}->{error}}) {
     $('#<%= $k %>').addClass('is-invalid').after('<div id="<%= $k %>ValidationFeedback" class="invalid-feedback font-monospace"></div>');
     % if (scalar(@$v) == 1) {
     $('#<%= $k %>ValidationFeedback').text('<%= $v->[0] %>');
     % } else {
     $('#<%= $k %>ValidationFeedback').text('is not <%= $v->[0] %>: <%= $v->[2] %>');
     % }
   % }
  </script>
% }

<script src="/assets/js/umi-tool-modify.js"></script>

%#<script>
%# $(document).ready(function() {
%#   // Store the original markup of the section to be cloned.
%#   // We store the outer HTML of #to-clone BEFORE any Select2 transformation.
%#   var originalMarkup = $('#to-clone').prop('outerHTML');
%#
%#   // Initialize Select2 on the original selects.
%#   $('#to-clone .select2').select2({
%#     placeholder: "Select or add options",
%#     allowClear: true
%#   });
%#   $('#hosts').select2({
%#     tags: true,
%#     tokenSeparators: [',', ' '],
%#     placeholder: "Select or add options",
%#     allowClear: true
%#   });
%#
%#   // Function to clone the section.
%#   function cloneSection() {
%#     // Create a clone from the stored original markup.
%#     var $newClone = $(originalMarkup);
%#     // Remove the container's id and add a marker class so we can identify clones.
%#     $newClone.removeAttr('id').addClass('clone-section');
%#     // Remove any IDs from cloned select elements to avoid duplicates.
%#     $newClone.find('select').removeAttr('id');
%#     // Append the cloned section to a dedicated container (or after the original).
%#     $('#clones-container').append($newClone);
%#     
%#     // Reinitialize Select2 on cloned select elements.
%#     $newClone.find('select.select2').each(function() {
%#       $(this).select2({
%#         placeholder: "Select or add options",
%#         allowClear: true
%#       });
%#     });
%#     // For the hosts select in the clone (if present), reinitialize with tagging.
%#     $newClone.find('select[name="hosts"]').each(function() {
%#       $(this).select2({
%#         tags: true,
%#         tokenSeparators: [',', ' '],
%#         placeholder: "Select or add options",
%#         allowClear: true
%#       });
%#     });
%#   }
%#
%#   // Function to delete the last cloned section.
%#   function deleteLastClone() {
%#     var $clones = $('#clones-container .clone-section');
%#     if ($clones.length > 0) {
%#       $clones.last().remove();
%#     }
%#   }
%#
%#   // Attach click event listeners.
%#   $('#cloneButton').on('click', cloneSection);
%#   $('#deleteButton').on('click', deleteLastClone);
%# });
%#</script>

<script>
 $(document).ready(function() {

   $('.select2').select2({
     placeholder: "Select or add options", // Optional placeholder text
     allowClear: true                 // Optional: allows the user to clear selection
   });

   $('#hosts').select2({
     tags: true,                      // Enable tagging for custom user input
     tokenSeparators: [',', ' '],     // Allow comma and space as delimiters
     placeholder: "Select or add options", // Optional placeholder text
     allowClear: true                 // Optional: allows the user to clear selection
   });

 });
</script>

