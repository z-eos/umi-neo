%# -*- mode: web; eval: (follow-mode) -*-

<h3 class="fw-bold p-5">
  <i class="fas fa-user-friends fa-lg mr-3 text-muted"></i>
  New NetGroup <small><em class="text-muted font-monospace"></em></small>
</h3>
<hr>

% my $em = stash->{emploees};
%= form_for '/netgroup/new' => {class => "form-horizontal"} => (method => 'POST') => begin

  <div class="row mb-3">
    %= label_for cn => 'CN', class => 'col-sm-2 col-form-label text-end fw-bold text-uppercase'
    <div class="col-sm-10">
      %= text_field 'cn', class => 'form-control', id => 'cn', placeholder => 'Group name'
    </div>
  </div>

  <div class="row mb-3">
    %= label_for description => 'Description', class => 'col-sm-2 col-form-label text-end fw-bold text-uppercase'
    <div class="col-sm-10">
      %= text_area 'description', cols => 3, class => 'form-control', placeholder => 'Short description'
    </div>
  </div>

  <div class="row mb-3" title="">
    %= label_for memberUid => 'Member:', class => 'col-sm-2 col-form-label text-end fw-bold text-uppercase'
    <div class="col-sm-10">
      %= select_field memberUid => stash->{emploees}, id => 'memberUid', class => 'form-select', multiple => 'multiple'
    </div>
  </div>

  <div class="row mb-3" title="">
    %= label_for hosts => 'Hosts:', class => 'col-sm-2 col-form-label text-end fw-bold text-uppercase'
    <div class="col-sm-10">
      %= select_field hosts => stash->{hosts}, id => 'hosts', class => 'form-select', multiple => 'multiple'
    </div>
  </div>

  <div class="row mb-3" title="">
    %= label_for host => 'New Host:', class => 'col-sm-2 col-form-label text-end fw-bold text-uppercase'
    <div class="col-sm-10">
      % my $host = stash->{host};
      % if ( defined $host && ref($host) eq 'ARRAY' )
      % {
	% foreach (@$host) {
	  <div id="" class="input-group input-group-sm entry-removable entry-at-least-one">
	    <span class="input-group-btn">
	      <!-- Clone Button -->
	      <button class="btn btn-secondary btn-sm btn-add element-add"
		      id="" type="button" title="click to add another host">
		<i class="fa-solid fa-fw fa-clone text-success-emphasis"></i>
	      </button>
	    </span>
	    <input type="text" name="host" id="" class="form-control" value="<%= $_ %>">
	    <span class="input-group-btn">
	      <!-- Delete Button -->
	      <button class="btn btn-secondary btn-sm btn-delete element-delete" type="button" title="Click to delete host">
		<i class="fa-solid fa-fw fa-trash text-danger-emphasis"></i>
	      </button>
	    </span>
	  </div>	  
	% }
      % } else {
	<div id="" class="input-group input-group-sm entry-removable entry-at-least-one">
	  <span class="input-group-btn">
	    <!-- Clone Button -->
	    <button class="btn btn-secondary btn-sm btn-add element-add"
		    id="" type="button" title="click to add another host">
	      <i class="fa-solid fa-fw fa-clone text-success-emphasis"></i>
	    </button>
	  </span>
	  %= text_field host => $host, class => 'form-control', title => ''
	  <span class="input-group-btn">
	    <!-- Delete Button -->
	    <button class="btn btn-secondary btn-sm btn-delete element-delete" type="button" title="Click to delete host">
	      <i class="fa-solid fa-fw fa-trash text-danger-emphasis"></i>
	    </button>
	  </span>
	</div>
      % }
    </div>
  </div>
  
  %= submit_button 'Submit', class => 'btn btn-success font-weight-bold text-uppercase text-end'

% end
% my $tuples = stash->{tuples};
<pre class="p-5 font-monospace umi-text-tiny"><%= dumper $tuples if defined $tuples %>
<pre class="mt-5 umi-text-tiny text-muted"><%= dumper stash->{'mojo.validation'}->{error} if %{stash->{'mojo.validation'}->{error}} %></pre>

% if ( stash->{'mojo.validation'}->{error} ) {
  <script>
   % while (my ($k, $v) = each %{stash->{'mojo.validation'}->{error}}) {
     $('#<%= $k %>').addClass('is-invalid').after('<div id="<%= $k %>ValidationFeedback" class="invalid-feedback font-monospace"></div>');
     % if (scalar(@$v) == 1) {
     $('#<%= $k %>ValidationFeedback').text('<%= $v->[0] %>');
     % } else {
     $('#<%= $k %>ValidationFeedback').text('is not <%= $v->[0] %>: <%= $v->[2] %>');
     % }
   % }
  </script>
% }

<script>
 document.addEventListener('DOMContentLoaded', function() {
   const choicesConfig = {
     allowHTML: true,
     placeholder: true,
     placeholderValue: 'Pick member/s',
     removeItemButton: true,
     removeItemIconText: 'Ã—',
     renderChoiceLimit: -1,
   };

   // Initialize Choices.js on every <select> element on the page.
   document.querySelectorAll('select').forEach(function(selectElement) {
     new Choices(selectElement, choicesConfig);
   });
 });

</script>

<script src="/assets/js/umi-tool-modify.js"></script>
